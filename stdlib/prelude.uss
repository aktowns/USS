;;;
;;; Lispy Standard Prelude
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Atoms

(def 'nil {})
(def 'true 1)
(def 'false 0)

;;; Functional Functions

(def 'alias def)

; (def {fun} (\ {f b} {
;  def (head f) (\ (tail f) b)
; }))

; Function Definitions
(def 'fun (\ {f a b} {
  def f (\ a b)
}))

; Open new scope
(fun 'let |b| {
  ((\ {_} b) ())
})

; Unpack List to Function
(fun 'unpack |f l| {
  eval (join [f] l)
})

; Unapply List to Function
(fun 'pack |f & xs| {
  f xs
})

; Curried and Uncurried calling
(def 'curry unpack)
(def 'uncurry pack)

; Perform Several things in Sequence
(fun 'do |& l| {
  if (== l nil)
    {nil}
    {last l}
})

;;; Logical Functions

; Logical Functions
(fun 'not |x| {
  - 1 x
})

(fun 'or |x y| {
  + x y
})

(fun 'and |x y| {
  * x y
})

;;; Numeric Functions

; Minimum of Arguments
(fun 'min |& xs| {
  if (== (tail xs) nil) {fst xs}
    {do
      (= {rest} (unpack min (tail xs)))
      (= {item} (fst xs))
      (if (< item rest) {item} {rest})
    }
})

; Maximum of Arguments
(fun 'max |& xs| {
  if (== (tail xs) nil) {fst xs}
    {do
      (= {rest} (unpack max (tail xs)))
      (= {item} (fst xs))
      (if (> item rest) {item} {rest})
    }
})

;;; Conditional Functions

(fun 'select |& cs| {
  if (== cs nil)
    {error "No Selection Found"}
    {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

(fun 'case |x & cs| {
  if (== cs nil)
    {error "No Case Found"}
    {if (== x (fst (fst cs))) {snd (fst cs)} {
	  unpack case (join [x] (tail cs))}}
})

(def 'otherwise true)

;;; Misc Functions

(fun 'flip |f a b| {
  f b a
})

(fun 'ghost |& xs| {
  eval xs
})

(fun 'comp |f g x| {
  f (g x)
})

(load (path-join file-dir "list.uss"))
(load (path-join file-dir "math.uss"))
(load (path-join file-dir "strings.uss"))
(load (path-join file-dir "ffi.uss"))


